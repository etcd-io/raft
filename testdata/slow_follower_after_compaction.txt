# This is a regression test for https://github.com/etcd-io/raft/pull/31.

# Start with 3 nodes, with a limited in-flight capacity.
log-level none
add-nodes 3 voters=(1,2,3) index=10 inflight=2
campaign 1
stabilize
----
ok

# Propose 3 entries.
propose 1 prop_1_12
propose 1 prop_1_13
propose 1 prop_1_14
stabilize
----
ok

# All nodes up-to-date.
log-level debug
status 1
----
1: StateReplicate match=14 next=15
2: StateReplicate match=14 next=15
3: StateReplicate match=14 next=15

# Propose and commit entries on nodes 1 and 2.
log-level none
propose 1 prop_1_15
propose 1 prop_1_16
propose 1 prop_1_17
propose 1 prop_1_18
stabilize 1 2
----
ok

# Nodes 1 and 2 up-to-date, 3 is behind and MsgApp flow is throttled.
log-level debug
status 1
----
1: StateReplicate match=18 next=19
2: StateReplicate match=18 next=19
3: StateReplicate match=14 next=17 paused inflight=2[full]

# Break the MsgApp flow from the leader to node 3.
deliver-msgs drop=3
----
dropped: 1->3 MsgApp Term:1 Log:1/14 Commit:14 Entries:[1/15 EntryNormal "prop_1_15"]
dropped: 1->3 MsgApp Term:1 Log:1/15 Commit:14 Entries:[1/16 EntryNormal "prop_1_16"]

# Truncate the leader's log beyond node 3 log size.
compact 1 17
----
1/18 EntryNormal "prop_1_18"

# Trigger a round of empty MsgApp "probe" from leader. It will reach node 3
# which will reply with a rejection MsgApp because it sees a gap in the log.
# Node 1 will reset the MsgApp flow and send a snapshot to catch node 3 up.
tick-heartbeat 1
log-level none
stabilize
----
ok

# All nodes caught up.
log-level debug
status 1
----
1: StateReplicate match=18 next=19
2: StateReplicate match=18 next=19
3: StateReplicate match=18 next=19
